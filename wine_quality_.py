# -*- coding: utf-8 -*-
"""wine quality .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R34-bN-tHKpc8HxssFNRDFZFXxSmkeBH

IMPORT LIBRARIES
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sb

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn import metrics
from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn.linear_model import LogisticRegression

import warnings
warnings.filterwarnings('ignore')

"""READ CSV"""

df = pd.read_csv('/content/winequality.csv')
print(df.head())

"""DISPLAY FILE"""

df.info()

df.describe().T

"""**EDA**"""

df.isnull().sum()

for col in df.columns:
  if df[col].isnull().sum() > 0:
	  df[col] = df[col].fillna(df[col].mean())

df.isnull().sum().sum()

"""VISUALISATIONS"""

df.hist(bins=20, figsize=(10, 10))
plt.show()

plt.bar(df['quality'], df['alcohol'])
plt.xlabel('quality')
plt.ylabel('alcohol')
plt.show()

non_numeric_cols = df.select_dtypes(exclude=np.number).columns
df_numeric = df.drop(non_numeric_cols, axis=1)

plt.figure(figsize=(12, 12))
sb.heatmap(df_numeric.corr() > 0.7, annot=True, cbar=False)
plt.show()

"""REMOVE CORRELATED DATA"""

df = df.drop('total sulfur dioxide', axis=1)

"""MODEL DEVELOPEMENT"""

df['best quality'] = [1 if x > 5 else 0 for x in df.quality]
df.replace({'white': 1, 'red': 0}, inplace=True)

features = df.drop(['quality', 'best quality'], axis=1)
target = df['best quality']

xtrain, xtest, ytrain, ytest = train_test_split(
	features, target, test_size=0.2, random_state=40)

xtrain.shape, xtest.shape

models = [LogisticRegression(), XGBClassifier(), SVC(kernel='rbf')]

for i in range(3):
	models[i].fit(xtrain, ytrain)

	print(f'{models[i]} : ')
	print('Training Accuracy : ', metrics.roc_auc_score(ytrain, models[i].predict(xtrain)))
	print('Validation Accuracy : ', metrics.roc_auc_score(
		ytest, models[i].predict(xtest)))
	print()

"""MODEL EVALUATION"""

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt

cm = confusion_matrix(ytest, models[1].predict(xtest))
disp = ConfusionMatrixDisplay(confusion_matrix=cm)
disp.plot()
plt.show()

print(metrics.classification_report(ytest,
									models[1].predict(xtest)))